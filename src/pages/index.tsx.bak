import { useEffect, useState } from "react";
import Head from "next/head";
import { DndProvider } from "react-dnd";
import { HTML5Backend } from "react-dnd-html5-backend";
import { TouchBackend } from "react-dnd-touch-backend";
import { isMobile } from "react-device-detect";
import Link from "next/link";

import AvailablePlayers from "@/components/AvailablePlayers";
import TeamContainer, {
  PlayerSelectionModal,
} from "@/components/TeamContainer";
import DraftSystem from "@/components/DraftSystem";
import { AppPlayer, PlayerPosition, Team } from "@/types";
import { playerApi, lineupApi, teamApi, matchApi } from "@/lib/api";
import { DraftState, Match } from "@/lib/database/types";
import CreateMatchModal from "@/components/CreateMatchModal";

// Default empty teams structure
const DEFAULT_TEAMS: { [key: string]: Team } = {
  borjas: {
    id: "borjas",
    name: "Casper",
    players: {
      GK: [],
      CL: [],
      CR: [],
      ML: [],
      MR: [],
      ST: [],
      SUB: [],
    },
  },
  nietos: {
    id: "nietos",
    name: "NietakO",
    players: {
      GK: [],
      CL: [],
      CR: [],
      ML: [],
      MR: [],
      ST: [],
      SUB: [],
    },
  },
};

export default function Home() {
  // Use mobile detection for touch vs mouse interactions
  const [isMobileView, setIsMobileView] = useState(false);
  const [isClient, setIsClient] = useState(false);
  const [isLoading, setIsLoading] = useState(true);
  const [dbInitialized, setDbInitialized] = useState(false);
  const [isInitializing, setIsInitializing] = useState(false);
  const [showDraftSystem, setShowDraftSystem] = useState(false);
  const [isDraftActive, setIsDraftActive] = useState(false);

  // Match state
  const [matches, setMatches] = useState<Match[]>([]);
  const [latestMatch, setLatestMatch] = useState<Match | null>(null);
  const [isCreateMatchModalOpen, setIsCreateMatchModalOpen] = useState(false);

  // Players and teams state
  const [availablePlayers, setAvailablePlayers] = useState<AppPlayer[]>([]);
  const [teams, setTeams] = useState<{ [key: string]: Team }>(DEFAULT_TEAMS);
  const [selectedPosition, setSelectedPosition] = useState<{
    position: PlayerPosition;
    teamId: string;
  } | null>(null);

  useEffect(() => {
    setIsClient(true);
    setIsMobileView(isMobile);
  }, []);

  // Load players, lineups and matches from database
  useEffect(() => {
    async function loadData() {
      try {
        setIsLoading(true);

        // Load matches
        try {
          const matchesData = await matchApi.getAll();
          setMatches(matchesData);

          // Set the latest match based on created_at timestamp
          if (matchesData.length > 0) {
            const latestMatchData = matchesData.sort(
              (a, b) =>
                new Date(b.created_at).getTime() -
                new Date(a.created_at).getTime()
            )[0];
            setLatestMatch(latestMatchData);

            // Load the latest match lineups
            await loadMatchLineups(latestMatchData.id);
          }
        } catch (error) {
          console.error("Error al cargar partidos:", error);
          setMatches([]);
        }

        setIsLoading(false);
      } catch (error) {
        console.error("Error al cargar datos:", error);
        setIsLoading(false);
      }
    }

    // Function to load match-specific lineups and players
    async function loadMatchLineups(matchId: string) {
      try {
        // Load available players for this match
        const matchPlayers = await matchApi.getAvailablePlayers(matchId);

        // Map players to app format
        const appPlayers: AppPlayer[] = matchPlayers.map((p) => ({
          id: p.id,
          name: p.name,
          rating: p.rating,
          position: p.position as PlayerPosition | null,
          team: null,
          stats: {
            goals: p.goals,
            assists: p.assists,
            saves: p.saves,
            goalsSaved: p.goals_saved,
          },
          number: p.number || undefined,
          nickname: p.nickname || undefined,
        }));

        // Load match-specific lineups
        const lineups = await lineupApi.getAll(matchId);

        if (lineups && (lineups.borjas || lineups.nietos)) {
          setTeams(lineups);

          // Filter out players already assigned to teams
          const assignedPlayerIds = new Set<string>();

          Object.values(lineups).forEach((team) => {
            Object.values(team.players).forEach((positionPlayers) => {
              positionPlayers.forEach((player) => {
                assignedPlayerIds.add(player.id);
              });
            });
          });

          setAvailablePlayers(
            appPlayers.filter((player) => !assignedPlayerIds.has(player.id))
          );
        } else {
          // If no lineups exist for this match, show all available players
          setAvailablePlayers(appPlayers);
        }
      } catch (error) {
        console.error(`Error loading data for match ${matchId}:`, error);

        // Fallback to loading all players if match-specific loading fails
        try {
          const dbPlayers = await playerApi.getAll();
          const appPlayers: AppPlayer[] = dbPlayers.map((p) => ({
            id: p.id,
            name: p.name,
            rating: p.rating,
            position: p.position as PlayerPosition | null,
            team: null,
            stats: {
              goals: p.goals,
              assists: p.assists,
              saves: p.saves,
              goalsSaved: p.goals_saved,
            },
            number: p.number || undefined,
            nickname: p.nickname || undefined,
          }));
          setAvailablePlayers(appPlayers);
        } catch (err) {
          console.error("Error loading fallback players:", err);
          setAvailablePlayers([]);
        }
      }
    }

    if (isClient) {
      loadData();
    }
  }, [isClient, dbInitialized]);

  // Function to handle player drops on teams
  const handlePlayerDrop = async (
    playerId: string,
    teamId: string,
    position: PlayerPosition
  ) => {
    // Si el triaje está activo, no permitir añadir jugadores manualmente
    if (isDraftActive) {
      console.warn(
        "No se pueden añadir jugadores manualmente durante el triaje activo."
      );
      return;
    }

    // Find the player from available players or teams
    let player: AppPlayer | undefined = availablePlayers.find(
      (p) => p.id === playerId
    );

    if (!player) {
      // If not in availablePlayers, look in teams
      for (const tId of ["borjas", "nietos"] as const) {
        for (const pos of Object.keys(teams[tId].players) as PlayerPosition[]) {
          const foundPlayer = teams[tId].players[pos].find(
            (p) => p.id === playerId
          );
          if (foundPlayer) {
            player = foundPlayer;
            break;
          }
        }
        if (player) break;
      }
    }

    // If player not found, exit function
    if (!player) return;

    // Step 1: Create a new teams object to avoid direct mutation
    const newTeams = JSON.parse(JSON.stringify(teams)) as typeof teams;

    // Step 2: Remove player from available players if they're there
    if (!player.team) {
      setAvailablePlayers((prev) => prev.filter((p) => p.id !== playerId));
    }

    // Step 3: Remove player from any team and position they might be in
    for (const tId of ["borjas", "nietos"] as const) {
      for (const pos of Object.keys(
        newTeams[tId].players
      ) as PlayerPosition[]) {
        newTeams[tId].players[pos] = newTeams[tId].players[pos].filter(
          (p) => p.id !== playerId
        );
      }
    }

    // Step 4: Add player to the new team and position
    const updatedPlayer = {
      ...player,
      team: teamId,
    };

    newTeams[teamId].players[position].push(updatedPlayer);

    // Step 5: Update state with the new teams object
    setTeams(newTeams);

    // Step 6: Guardar en la base de datos
    try {
      // Determinar el orden (por ahora siempre al final)
      const order = newTeams[teamId].players[position].length - 1;

      // If we have a latest match, save position for that match
      if (latestMatch) {
        await lineupApi.savePosition(
          teamId,
          playerId,
          position,
          order,
          latestMatch.id
        );
      } else {
        // Otherwise save to general lineups
        await lineupApi.savePosition(teamId, playerId, position, order);
      }
    } catch (error) {
      console.error("Error al guardar posición en base de datos:", error);
      // Revert the changes in the UI
      setTeams((prevTeams) => {
        const revertedTeams = { ...prevTeams };
        revertedTeams[teamId].players[position] = revertedTeams[teamId].players[
          position
        ].filter((p) => p.id !== playerId);
        return revertedTeams;
      });
      // Add the player back to available players
      setAvailablePlayers((prev) => [...prev, player as AppPlayer]);
      // Show error message
      alert(
        `Error al guardar la posición: ${
          error instanceof Error ? error.message : "Error desconocido"
        }`
      );
    }
  };

  // Remove player from team, return to available players
  const handleRemovePlayer = async (playerId: string) => {
    // Si el triaje está activo, no permitir quitar jugadores manualmente
    if (isDraftActive) {
      console.warn(
        "No se pueden quitar jugadores manualmente durante el triaje activo."
      );
      return;
    }

    // Find which team the player is on
    let playerTeam: string | null = null;
    let playerPosition: PlayerPosition | null = null;
    let player: AppPlayer | null = null;

    // Search through teams
    Object.keys(teams).forEach((teamId) => {
      const team = teams[teamId];
      Object.keys(team.players).forEach((pos) => {
        const playerIndex = team.players[pos as PlayerPosition].findIndex(
          (p) => p.id === playerId
        );
        if (playerIndex >= 0) {
          playerTeam = teamId;
          playerPosition = pos as PlayerPosition;
          player = team.players[pos as PlayerPosition][playerIndex];
        }
      });
    });

    if (playerTeam && playerPosition && player) {
      // Remove from team
      setTeams((prevTeams) => {
        const newTeams = { ...prevTeams };
        newTeams[playerTeam as string].players[
          playerPosition as PlayerPosition
        ] = newTeams[playerTeam as string].players[
          playerPosition as PlayerPosition
        ].filter((p) => p.id !== playerId);
        return newTeams;
      });

      // Add to available players
      setAvailablePlayers((prev) => [
        ...prev,
        { ...player, team: null } as AppPlayer,
      ]);

      // Eliminar de la base de datos
      try {
        await lineupApi.removePlayer(playerTeam, playerId);
      } catch (error) {
        console.error("Error al eliminar jugador de la base de datos:", error);
      }
    }
  };

  // Reset everything
  const handleReset = async () => {
    // Si el triaje está activo, no permitir resetear manualmente
    if (isDraftActive) {
      console.warn(
        "No se pueden resetear los equipos durante el triaje activo."
      );
      return;
    }

    // Resetear el estado
    setTeams(DEFAULT_TEAMS);

    // Recargar todos los jugadores como disponibles
    try {
      const dbPlayers = await playerApi.getAll();

      const appPlayers: AppPlayer[] = dbPlayers.map((p) => ({
        id: p.id,
        name: p.name,
        rating: p.rating,
        position: p.position as PlayerPosition | null,
        team: null,
        stats: {
          goals: p.goals,
          assists: p.assists,
          saves: p.saves,
          goalsSaved: p.goals_saved,
        },
        number: p.number || undefined,
        nickname: p.nickname || undefined,
      }));

      setAvailablePlayers(appPlayers);

      // Resetear alineaciones en la base de datos
      await lineupApi.reset();
    } catch (error) {
      console.error("Error al resetear alineaciones:", error);
    }

    // Toggle para forzar recarga
    setDbInitialized((prev) => !prev);
  };

  // Inicializar la base de datos
  const handleInitializeDb = async () => {
    try {
      setIsInitializing(true);

      // Inicializar equipos
      await teamApi.initialize();

      // Inicializar jugadores de ejemplo
      await playerApi.initialize();

      // Recargar los datos
      setDbInitialized(!dbInitialized);

      setIsInitializing(false);
    } catch (error) {
      console.error("Error al inicializar la base de datos:", error);
      setIsInitializing(false);
    }
  };

  // Manejar la selección de jugadores en el triaje
  const handleDraftPlayerPicked = (playerId: string, teamId: string) => {
    // Buscar al jugador seleccionado
    const player = availablePlayers.find((p) => p.id === playerId);
    if (!player) return;

    // Primero, eliminar al jugador de la lista de disponibles
    setAvailablePlayers((prev) => prev.filter((p) => p.id !== playerId));

    // Step 1: Create a new teams object to avoid direct mutation
    const newTeams = JSON.parse(JSON.stringify(teams)) as typeof teams;

    // Step 2: Add player to the SUB position in the team
    const updatedPlayer = {
      ...player,
      team: teamId,
    };

    newTeams[teamId].players["SUB"].push(updatedPlayer);

    // Step 3: Update state with the new teams object
    setTeams(newTeams);

    // Step 4: Guardar en la base de datos
    try {
      // Determinar el orden (por ahora siempre al final)
      const order = newTeams[teamId].players["SUB"].length - 1;

      // Guardar la posición en la base de datos
      lineupApi.savePosition(teamId, playerId, "SUB", order);
    } catch (error) {
      console.error("Error al guardar posición en base de datos:", error);
    }
  };

  // Actualizar el estado del triaje
  const handleDraftStateChange = (newState: DraftState) => {
    setIsDraftActive(newState.is_active);
  };

  const handlePositionClick = (position: PlayerPosition, teamId: string) => {
    if (isMobileView && !isDraftActive) {
      setSelectedPosition({ position, teamId });
    }
  };

  const handlePlayerSelect = (player: AppPlayer, position: PlayerPosition) => {
    if (selectedPosition) {
      handlePlayerDrop(player.id, selectedPosition.teamId, position);
      setSelectedPosition(null);
    }
  };

  // Create a new match
  const handleCreateMatch = async () => {
    setIsCreateMatchModalOpen(true);
  };

  const handleMatchCreated = async () => {
    try {
      const matchesData = await matchApi.getAll();
      setMatches(matchesData);
    } catch (error) {
      console.error("Error al cargar partidos:", error);
    }
  };

  // Format date for display
  const formatDate = (dateString: string) => {
    const options: Intl.DateTimeFormatOptions = {
      weekday: "long",
      year: "numeric",
      month: "long",
      day: "numeric",
    };
    return new Date(dateString).toLocaleDateString("es-ES", options);
  };

  // If no matches exist, show match creation interface
  if (isClient && !isLoading && matches.length === 0) {
    return (
      <>
        <Head>
          <title>Futbol Triaje | Crea tu primer partido</title>
        </Head>
        <div className="container mx-auto px-4 py-8">
          <h1 className="text-3xl font-bold text-center text-white mb-8">
            Bienvenido a Futbol Triaje
          </h1>

          <div className="max-w-md mx-auto bg-gray-800 rounded-lg p-8 shadow-lg">
            <h2 className="text-2xl font-bold text-white mb-4">¡Comencemos!</h2>
            <p className="text-gray-300 mb-6">
              Para empezar, necesitas crear tu primer partido. Esto te permitirá
              configurar equipos, jugadores y llevar el registro de
              estadísticas.
            </p>

            <button
              onClick={handleCreateMatch}
              className="w-full py-3 bg-blue-600 hover:bg-blue-700 text-white rounded-lg transition-colors text-lg font-medium"
            >
              Crear Primer Partido
            </button>
          </div>
        </div>

        <CreateMatchModal
          isOpen={isCreateMatchModalOpen}
          onClose={() => setIsCreateMatchModalOpen(false)}
          onMatchCreated={handleMatchCreated}
        />
      </>
    );
  }

  return (
    <>
      <Head>
        <title>Futbol Triaje</title>
        <meta
          name="description"
          content="Aplicación para gestionar equipos de fútbol y el sistema de triaje"
        />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className="min-h-screen bg-gradient-to-br from-gray-800 to-gray-900">
        <div className="container mx-auto py-6 px-4">
          <div className="flex flex-col md:flex-row justify-between items-start md:items-center mb-8">
            <div>
              <h1 className="text-4xl font-bold text-white mb-2">
                Futbol Triaje
              </h1>
              {latestMatch ? (
                <div className="bg-blue-900/30 p-3 rounded-lg mb-4">
                  <h2 className="text-xl font-semibold text-blue-300">
                    Próximo partido: {latestMatch.name}
                  </h2>
                  <p className="text-gray-300">
                    {formatDate(latestMatch.date)}
                  </p>
                  <Link
                    href={`